import java.nio.charset.StandardCharsets
import java.nio.file.Files
import java.nio.file.StandardOpenOption

plugins {
	id 'java'
	id 'application'
	id 'java-library'
	id 'maven-publish'
	id 'jacoco'

	alias(libs.plugins.jlink)
}

application {
	mainClassName = 'org.unrealarchive.www.Main'
	mainModule = 'unreal.archive.www'
}

jar {
	manifest {
		attributes(
				'Implementation-Title': project.name,
				'Implementation-Version': project.version,
				'Main-Class': mainClassName,
		)
	}
}

jlink {
	mergedModuleName = "unreal.archive.www.merged"
	options = ['--strip-debug', '--compress', 'zip-6', '--no-header-files', '--no-man-pages']

	imageName = "unreal-archive-${project.name}"
	imageDir = layout.buildDirectory.dir("unreal-archive-${project.name}")

	jpackage {
		installerType = project.findProperty('installerType')
	}
}

def tarBinary = artifacts.add('archives', layout.buildDirectory.file("unreal-archive-${project.name}.tgz").get().asFile) {
	type = 'tgz'
	builtBy 'jlinkTar'
}

tasks.register('jlinkTar', Tar) {
	dependsOn jlinkZip
	archiveFileName = "${jlink.imageName.get()}.tgz"
	destinationDirectory = layout.buildDirectory
	compression = Compression.GZIP

	into("${jlink.imageName.get()}") {
		from jlink.imageDir
	}
}

publishing {
	publications {
		mavenLatest(MavenPublication) {
			pom {
				version = "latest"
			}
			artifact tarBinary
		}
	}
}

dependencies {
	implementation project(':common')
	implementation project(':content')

	implementation(libs.jackson.databind)

	implementation(libs.freemarker)
	implementation(libs.commonmark)
	implementation(libs.commonmark.ext.tables)
	implementation(libs.jsoup)

	testImplementation(libs.junit.jupiter)
}

/**
 * Create list of static files, used for later extraction from the jar to disk.
 */
processResources.doLast {
	def wwwStaticDir = layout.projectDirectory.dir('src/main/resources/org/unrealarchive/www/static').asFile.toPath()
	def destFile = layout.buildDirectory.dir('resources/main/org/unrealarchive/www/static.list').get().asFile.toPath()
	def staticList = new StringBuilder()
	files { fileTree(wwwStaticDir).matching { exclude('**/*.xcf') } }.each {
		staticList.append(wwwStaticDir.parent.relativize(it.toPath())).append("\t").append(it.lastModified()).append("\n")
	}

	// create single all.css file - cssOut filename must be used in _header.html
	def cssSource = files(
			wwwStaticDir.resolve("fonts/fonts2.css"),
			wwwStaticDir.resolve("css/style.css"),
			wwwStaticDir.resolve("css/style7.css")
	)
	def cssDate = cssSource.max {f -> f.lastModified()}
	def cssOut = destFile.parent.resolve("static/css/202506.css")
	cssOut.write('') // truncate output if needed
	// clean up comments and whitespace in combined CSS
	cssSource.each { f -> cssOut << f.text.replaceAll("[\n\\t]", "").replaceAll("/\\*.+?\\*/", "").replaceAll("\\s{2,}", " ") }
	staticList.append(destFile.parent.relativize(cssOut)).append("\t").append(cssDate.lastModified()).append("\n")

	Files.write(destFile, staticList.toString().replaceAll("\\\\", "/").getBytes(StandardCharsets.UTF_8),
			StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING)

	// write version resource file
	Files.write(
			Files.createDirectories(file(layout.buildDirectory).toPath().resolve('resources/main/org/unrealarchive/www')).resolve('VERSION'),
			"${project.version}".getBytes(StandardCharsets.UTF_8),
			StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING
	)
}
