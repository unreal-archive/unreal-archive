import java.nio.charset.StandardCharsets
import java.nio.file.Files
import java.nio.file.StandardOpenOption

plugins {
	id 'java'
	id 'application'
	id 'maven-publish'
	id 'jacoco'
	id 'test-report-aggregation'

	id 'org.beryx.jlink' version '3.0.1'
}

allprojects {
	group = 'org.unrealarchive'
	version = "1.16"
	if (System.getenv().containsKey("BUILD_NUMBER")) {
		version += ".${System.env.BUILD_NUMBER}"
	} else version += ".DEV"

	apply plugin: 'java'
	apply plugin: 'maven-publish'
	apply plugin: 'jacoco'

	compileJava {
		options.release = 17
	}

	repositories {
		mavenCentral()
		maven {
			url "https://code.shrimpworks.za.net/artefacts"
		}
	}

	publishing {
		repositories {
			maven {
				name = "ShrimpWorks"
				url = 'https://code.shrimpworks.za.net/artefacts/'
				authentication {
					basic(BasicAuthentication)
				}
				credentials(PasswordCredentials) {
					username = "${System.env.ARTEFACTS_USER}"
					password = "${System.env.ARTEFACTS_PASSWORD}"
				}
			}
		}

		publications {
			maven(MavenPublication) {
				from components.java
			}
		}
	}

	test {
		useJUnitPlatform()
	}

	jacocoTestReport {
		reports {
			xml.required = true
		}
	}
}

application {
	mainClassName = 'org.unrealarchive.Main'
	mainModule = 'unreal.archive'
}

jlink {
	mergedModuleName = "unreal.archive.merged"
	options = ['--compress', '2', '--no-header-files', '--no-man-pages']

	imageName = "${project.name}"
	imageDir = layout.buildDirectory.dir(project.name)

	jpackage {
		installerType = project.findProperty('installerType')
	}
}

def tarBinary = artifacts.add('archives', layout.buildDirectory.file("${project.name}.tgz").get().asFile) {
	type 'tgz'
	builtBy 'jlinkTar'
}

/**
 * note - creating a tar bundle because the zip one appears to have issues with execution permissions once unpacked.
 */
tasks.register('jlinkTar', Tar) {
	dependsOn jlinkZip
	archiveFileName = "${jlink.imageName.get()}.tgz"
	destinationDirectory = layout.buildDirectory
	compression = Compression.GZIP

	into("${jlink.imageName.get()}") {
		from jlink.imageDir
	}
}

publishing {
	publications {
		mavenLatest(MavenPublication) {
			pom {
				version = "latest"
			}
			artifact tarBinary
		}
	}
}

dependencies {
	implementation project(':common')
	implementation project(':storage')
	implementation project(':content')

	implementation 'net.shrimpworks:unreal-package-lib:1.12.26'
	implementation 'net.shrimpworks:package-dependency:1.5.25'

	implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.0'
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.17.0'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.17.0'

	testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'

	testReportAggregation project(':common')
	testReportAggregation project(':storage')
	testReportAggregation project(':content')
	testReportAggregation project(':www')
}

processResources.doLast {
	// write version resource file
	Files.write(
			Files.createDirectories(buildDir.toPath().resolve('resources/main/org/unrealarchive')).resolve('VERSION'),
			"${project.version}".getBytes(StandardCharsets.UTF_8),
			StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING
	)
}

jar {
	manifest {
		attributes(
				'Implementation-Title': project.name,
				'Implementation-Version': project.version,
				'Main-Class': mainClassName,
		)
	}
}

test {
	finalizedBy tasks.named('testAggregateTestReport', TestReport)
}
